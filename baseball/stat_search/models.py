from django.db import models

def int_or_zero(val):
    try:
        return int(val)
    except ValueError:
        return 0

class Master(models.Model):
    player_id = models.CharField(max_length=20)
    birth_year = models.CharField(max_length=20)
    birth_month = models.CharField(max_length=20)
    birth_day = models.CharField(max_length=20)
    birth_country = models.CharField(max_length=20)
    birth_state = models.CharField(max_length=2)
    birth_city = models.CharField(max_length=20)
    death_year = models.CharField(max_length=20)
    death_month = models.CharField(max_length=20)
    death_day = models.CharField(max_length=20)
    death_country = models.CharField(max_length=20)
    death_state = models.CharField(max_length=2)
    death_city = models.CharField(max_length=20)
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    given_name = models.CharField(max_length=50)
    weight = models.CharField(max_length=100)
    height = models.CharField(max_length=100)
    bats = models.CharField(max_length=5)
    throws = models.CharField(max_length=5)
    debut = models.CharField(max_length=100)
    final_game = models.CharField(max_length=100)
    retro_id = models.CharField(max_length=20)
    bbref_id = models.CharField(max_length=20)

class Batting(models.Model):
    player_id = models.ForeignKey(Master)
    year = models.CharField(max_length=100)
    stint = models.CharField(max_length=100)
    team_id = models.CharField(max_length=10)
    league = models.CharField(max_length=10)
    games = models.CharField(max_length=100)
    at_bats = models.CharField(max_length=100)
    runs = models.CharField(max_length=100)
    hits = models.CharField(max_length=100)
    doubles = models.CharField(max_length=100)
    triples = models.CharField(max_length=100)
    homeruns = models.CharField(max_length=100)
    runs_batted_in = models.CharField(max_length=100)
    stolen_bases = models.CharField(max_length=100)
    caught_stealing = models.CharField(max_length=100)
    base_on_balls = models.CharField(max_length=100)
    strikeouts = models.CharField(max_length=100)
    intentional_walks = models.CharField(max_length=100)
    hit_by_pitch = models.CharField(max_length=100)
    sacrifice_hits = models.CharField(max_length=100)
    sacfifice_flies = models.CharField(max_length=100)
    grounded_into_double_plays = models.CharField(max_length=100)


    @property
    def on_base_percentage(self):
        # "" = 0
        numerator = int_or_zero(self.hits) + int_or_zero(self.base_on_balls) + int_or_zero(self.hit_by_pitch)
        denominator = int_or_zero(self.at_bats) + int_or_zero(self.base_on_balls) + int_or_zero(self.hit_by_pitch) + int_or_zero(self.sacfifice_flies)
        return numerator/denominator

class Pitching(models.Model):
    player_id = models.ForeignKey(Master)
    year = models.CharField(max_length=100)
    stint = models.CharField(max_length=100)
    team_id = models.CharField(max_length=10)
    league = models.CharField(max_length=10)
    wins = models.CharField(max_length=100)
    losses = models.CharField(max_length=100)
    games = models.CharField(max_length=100)
    games_started = models.CharField(max_length=100)
    complete_games = models.CharField(max_length=100)
    shutouts = models.CharField(max_length=100)
    saves = models.CharField(max_length=100)
    outs_pitched = models.CharField(max_length=100)
    hits = models.CharField(max_length=100)
    earned_runs = models.CharField(max_length=100)
    homeruns = models.CharField(max_length=100)
    walks = models.CharField(max_length=100)
    strikeouts = models.CharField(max_length=100)
    opponent_batting_average = models.CharField(max_length=100)
    earned_run_average = models.CharField(max_length=100)
    intentional_walks = models.CharField(max_length=100)
    wild_pitches = models.CharField(max_length=100)
    batters_hit_by_pitch = models.CharField(max_length=100)
    balks = models.CharField(max_length=100)
    batters_faced_by_pitcher = models.CharField(max_length=100)
    games_finished = models.CharField(max_length=100)
    runs_allowed = models.CharField(max_length=100)
    sacrifices = models.CharField(max_length=100)
    sacrifices_flies= models.CharField(max_length=100)
    grounded_into_double_plays = models.CharField(max_length=100)

class Fielding(models.Model):
    player_id = models.CharField(max_length=100)
    year = models.CharField(max_length=100)
    stint = models.CharField(max_length=100)
    team_id = models.CharField(max_length=100)
    league = models.CharField(max_length=100)
    postion = models.CharField(max_length=100)
    games = models.CharField(max_length=100)
    games_started = models.CharField(max_length=100)
    time_played_in_field = models.CharField(max_length=100)
    putouts = models.CharField(max_length=100)
    assists = models.CharField(max_length=100)
    errors = models.CharField(max_length=100)
    double_plays = models.CharField(max_length=100)
    passed_balls_catchers = models.CharField(max_length=100)
    wild_pitches_catchers = models.CharField(max_length=100)
    opponent_stolen_bases = models.CharField(max_length=100)
    opponent_caught_stealing = models.CharField(max_length=100)
    zone_rating = models.CharField(max_length=100)
